<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: flask, ebs | tushman.io]]></title>
  <link href="http://jtushman.github.io/blog/categories/flask-ebs/atom.xml" rel="self"/>
  <link href="http://jtushman.github.io/"/>
  <updated>2014-08-18T11:41:21-04:00</updated>
  <id>http://jtushman.github.io/</id>
  <author>
    <name><![CDATA[Jonathan Tushman]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[First impressions with Flask and Elastic Beanstalk]]></title>
    <link href="http://jtushman.github.io/blog/2013/06/12/first-impressions-with-flask-and-elastic-beanstalk/"/>
    <updated>2013-06-12T10:16:00-04:00</updated>
    <id>http://jtushman.github.io/blog/2013/06/12/first-impressions-with-flask-and-elastic-beanstalk</id>
    <content type="html"><![CDATA[<p>All in all it was pretty simple to get my flask app up and running on Elastic Beanstalk.  I ran into a couple of gotchas, and wanted to share them to save others some time.</p>

<p>I relied heavily on two tutorials to get going my first app up:</p>

<ol>
<li><a href="http://docs.aws.amazon.com/elasticbeanstalk/latest/dg/create_deploy_Python_flask.html">Deploying a Flask Application to AWS Elastic Beanstalk</a></li>
<li><a href="http://docs.aws.amazon.com/elasticbeanstalk/latest/dg/create_deploy_Python_custom_container.html">Customizing your python container</a></li>
</ol>


<h4>Three main gotchas where (see below for how to get solve / work around):</h4>

<ol>
<li><a href="#1">As of June 2013, <strong>EB only supports python 2.6</strong> (2.6.8 to be specific)</a></li>
<li><a href="#2">Make sure your container is configured to point to your static files</a></li>
<li><a href="#4">Make sure your Flask app is named application</a></li>
</ol>


<h4>Somethings that I am impressed with (again only been playing with this a day):</h4>

<ol>
<li>Fundamentally, easy to get up and running</li>
<li>Autoscaling seems to be pretty slick</li>
<li>Besides the python for the web server, the instances are highly configurable (<a href="http://docs.aws.amazon.com/elasticbeanstalk/latest/dg/customize-containers-ec2.html">docs</a>)

<ol>
<li>in particular I like the configurable services that you can attach to each instance</li>
</ol>
</li>
</ol>


<h4>Things that I am currently struggling with (but again its only been a day) are:</h4>

<ol>
<li>Can not specify python version for their WSGI</li>
<li>Not much of a community (or at least I can&rsquo;t find the community) around EB.  And so â€¦

<ol>
<li>Forums and StackOverflow are not manned by Amazon employees, and in general is not active</li>
<li>Documentation is pretty poor</li>
<li>Few documented patterns or best practices</li>
</ol>
</li>
<li>Logging is not great (<a href="#3">more below</a>)</li>
<li>No console concept (<code>eb run python</code> &mdash;> and get an interactive python console)</li>
</ol>


<p><a id="1"></a></p>

<h2>Currently Beanstalk only supports python 2.6</h2>

<ul>
<li><p>For now the only real option is to make sure your web app runs on 2.6.  I do not think thats critical, and I am sure in time they will upgrade to 2.7 and gasp maybe 3.0.  But if you need to run a higher version &mdash; you will need to look to another solution (ec2 or heroku).</p></li>
<li><p>To get your localenv to run 2.6, make a virtualenv like so &hellip;</p>

<pre><code>  virtualenv -p /usr/bin/python2.6 your_project_name
</code></pre></li>
<li><p>And you will need to keep another session open with 2.7 or greater to work with the <code>eb</code> cli (this still makes be laugh)</p></li>
</ul>


<p><a id="2"></a></p>

<h2>Configure your container to point to your static files:</h2>

<p>If you do not do this, all of your css, javascript and all your other static goodness will bot be served.</p>

<ol>
<li>Create a <code>.ebextensions</code> folder in your project root</li>
<li>Create a [project_name].config file in that .ebextensions folder</li>
<li><p>Mine looks like the following:</p>

<pre><code> option_settings:
   "aws:elasticbeanstalk:container:python:staticfiles":
     "/static/": "static/"    
</code></pre></li>
</ol>


<p>You can read more about configuration <a href="http://docs.aws.amazon.com/elasticbeanstalk/latest/dg/customize-containers-ec2.html">here</a></p>

<p><a id="4"></a></p>

<h2>Make sure your flask app (or another WSGI app is named application)</h2>

<p>EB WSGI looks for an <code>application</code> object inside an <code>application.py</code> file in your project root.  Mine looks like:</p>

<p>```python
from flask import Flask
application = app = Flask(<strong>name</strong>)</p>

<p>@app.route(&ldquo;/&rdquo;)      <br/>
def hello():</p>

<pre><code>return "Hello World!"
</code></pre>

<p>if <strong>name</strong> == &ldquo;<strong>main</strong>&rdquo;:</p>

<pre><code>application.run()          
</code></pre>

<p>```</p>

<h2>Other tips</h2>

<h3>Using brew to install the eb cli</h3>

<ul>
<li><p>If you are on a mac, you can use brew to install the elastic beanstalk cli (ironically you need to have python 2.7 or 3.x installed on your machine)</p>

<pre><code>  brew install aws-elasticbeanstalk
</code></pre></li>
</ul>


<p><a id="3"></a></p>

<h3>To Check out the logs</h3>

<p>You have a couple of options to check out the logs:</p>

<ol>
<li>using the CLI, <code>eb logs</code></li>
<li>going to the web console, navigate to logs, and hit &lsquo;Snapshot logs&rsquo; (<a href="http://docs.aws.amazon.com/elasticbeanstalk/latest/dg/using-features.loggingS3.title.html">docs</a>)</li>
</ol>


<p>I found the that formatting of <code>eb logs</code> in the console to be pretty unreadable.  The code is found <a href="http://aws.amazon.com/code/6752709412171743">here</a> (couldn&rsquo;t find it on github).  If I find I rely on this a lot I will probably rewrite this.  I think the main issue is three fold:</p>

<ol>
<li>They probably are giving us too much info.  They provide us separate logs from the following sources:

<ol>
<li>/opt/python/log/httpd.out</li>
<li>/var/log/httpd/error_log</li>
<li>/var/log/cfn-hup.log</li>
<li>/opt/python/log/supervisord.log</li>
<li>/var/log/eb-tools.log</li>
<li>/var/log/httpd/access_log</li>
<li>/var/log/eb-cfn-init-call.log</li>
<li>/var/log/eb-publish-logs.log</li>
<li>/var/log/cfn-init.log</li>
<li> /var/log/eb-cfn-init.log</li>
</ol>
</li>
<li>Each log is presented in a different format (I know why thats the case &mdash; but still)</li>
<li><p>And I think they are simply running <code>tail -n</code> on each each of these files. So you get the last n rows for each file, presented separately.  What I <em>really</em> want to know is what <em>just</em> happened or even better &mdash; what is happening right now (tailing).  AND to have all of these logs files interlaced and prefaced by its source.  Something like:</p>

<pre><code> [timestamp] [source=error_log] message 1
 [timestamp] [source=error_log] message 2
 [timestamp] [source=access_log] message 3
</code></pre></li>
</ol>

]]></content>
  </entry>
  
</feed>
