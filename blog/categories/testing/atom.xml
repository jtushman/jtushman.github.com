<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: testing, | tushman.io]]></title>
  <link href="http://jtushman.github.io/blog/categories/testing/atom.xml" rel="self"/>
  <link href="http://jtushman.github.io/"/>
  <updated>2014-09-15T11:41:52-04:00</updated>
  <id>http://jtushman.github.io/</id>
  <author>
    <name><![CDATA[Jonathan Tushman]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Parallelize your lettuce tests to win friends and influence others]]></title>
    <link href="http://jtushman.github.io/blog/2014/01/24/parallelize-your-lettuce-tests-to-win-friends-and-influence-others/"/>
    <updated>2014-01-24T15:23:00-05:00</updated>
    <id>http://jtushman.github.io/blog/2014/01/24/parallelize-your-lettuce-tests-to-win-friends-and-influence-others</id>
    <content type="html"><![CDATA[<p><strong>tl;dr:</strong>  I forked the lettuce package to use multiprocessing, tests run more then 4x faster on my MBP</p>

<p>I am a fan of Gabriel Falcão&rsquo;s <a href="http://lettuce.it/">lettuce</a> Behavior-Driven Development (BDD) tool.  We have been using it on my team for 6+ months now.  Recently our test suite completion time has crossed the 10 minute line, which had a bunch of negative effects, as you can imagine:</p>

<ul>
<li>people writing less tests</li>
<li>people running the test suite less frequently</li>
<li>people spending more time watching a test suite run, then coding, …</li>
</ul>


<p>We all are using relatively modern MBP with 4 cores, and we might as well make the most of them.  Here is my fork of lettuce that allows you to take advantage of all of your cores:</p>

<p><a href="https://github.com/jtushman/lettuce">https://github.com/jtushman/lettuce</a></p>

<p>I have made two main modifications (You will find the lion share of my modifications in this <a href="https://github.com/jtushman/lettuce/blob/master/lettuce/__init__.py">file</a>):</p>

<ul>
<li>I created a ParallelRunner (I have left the main runner alone), which kicks off processes to pull the scenarios off a queue</li>
<li>After each run I store the run times of each test in a <code>.scenarios</code> file, so in subsequent runs I can sort them longest to shortest</li>
</ul>


<p>My test suite used to take 12 minutes, now its takes 2 minutes &mdash; REJOICE!</p>

<h2>Usage</h2>

<p><code>lettuce tests -p 4 -v 2</code></p>

<p><strong>-p:</strong> stands for parallel.  You can set it to how many processes you like, I find that the number of cores should be your default</p>

<p><strong>-v</strong> is the same verbosity parameter, but I recommend setting it to 2 when using parallelization, otherwise the steps will interlace and not make much sense</p>

<p>in your <code>terrain.py</code> file, there are two new callbacks:</p>

<p><code>@before.batch</code> and <code>@after.batch</code></p>

<p>which you should use to set up and tear down each process.  I use main to fire up flask, selenium and mongo.  Also note that I set a port_number attribute on world which you can use set up processes specific servers.  For example:</p>

<p>```python
@before.batch
def batch_setup():</p>

<pre><code>settings.MONGO_DATABASE_NAME = 'testing__{}'.format(world.port_number)
mongoengine.connect(settings.MONGO_DATABASE_NAME, host=settings.MONGO_HOST, port=settings.MONGO_PORT,
                    username=settings.MONGO_USERNAME, password=settings.MONGO_PASSWORD)
clear_database()
</code></pre>

<p>```</p>

<h2>Caveats</h2>

<p>For this to work <strong>all of your tests need to be isolated</strong>, they can not depend on each other (which I think is best practice anyways).  This means in your tests you <strong>should not use</strong> world <strong>at all</strong>  Use <em>scenario</em> instead:</p>

<p>To do this, in your <code>terrain</code> file add the following:</p>

<p>```
class ScenarioState(object): pass</p>

<p>@before.each_scenario
def setup_senario(senario):</p>

<pre><code>world.scenario = ScenarioState()
</code></pre>

<p>def scenario():</p>

<pre><code>return world.scenario
</code></pre>

<p>```</p>

<p>And I use this all the time in my steps to refer to state from previous steps</p>

<p>```python
@step(u'Given a user exists with one account')
def given_a_user_exists(step):</p>

<pre><code>scenario.current_user = UserFactory.create()
</code></pre>

<p>@step(u'And the user has a dog')
def user_has_a_dog(step):</p>

<pre><code>scenario.current_user.dog = DogFactory.create()    
</code></pre>

<p>```</p>

<p>Hope you guys find this useful!</p>
]]></content>
  </entry>
  
</feed>
