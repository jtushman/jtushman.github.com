<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[tushman.io]]></title>
  <link href="http://jtushman.github.io/atom.xml" rel="self"/>
  <link href="http://jtushman.github.io/"/>
  <updated>2014-01-14T22:37:41-05:00</updated>
  <id>http://jtushman.github.io/</id>
  <author>
    <name><![CDATA[Jonathan Tushman]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Python | Multiprocessing and Interrupts]]></title>
    <link href="http://jtushman.github.io/blog/2014/01/14/python-%7C-multiprocessing-and-interrupts/"/>
    <updated>2014-01-14T22:21:00-05:00</updated>
    <id>http://jtushman.github.io/blog/2014/01/14/python-|-multiprocessing-and-interrupts</id>
    <content type="html"><![CDATA[<h3><strong>tl;dr:</strong> If handling interrupts is important, use a SyncManger (not multiprocessing.Manager) to handle shared state</h3>

<p>I just hit the learning curve pretty hard with python&rsquo;s <a href="http://docs.python.org/2/library/multiprocessing.html">multiprocessing</a> &mdash; but I came through it and wanted to share my learnings.</p>

<h2>Preliminary Thoughts</h2>

<p>The bulk of this post is going to be around using the multiprocess library, but a few preliminary thoughts:</p>

<h4>Multiprocessing and Threading is hard (especially in python):</h4>

<p>Its starts off all hunky-dory &mdash; but trust me, factor in time to hit the wall … hard.</p>

<h4>pstree is your friend.</h4>

<p>Stop what you are doing, and pick your favorite package manager and install <code>pstree</code>: (for me: <code>brew install pstree</code>)</p>

<p>Its super-useful for dealing with sub-processes, and see what is going on.</p>

<p>In particular <code>pstree -s &lt;string&gt;</code> which searches your branches containing processes that contain the string in the command line.  So much better than <code>ps</code></p>

<p>Output looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>➜  pstree -s python
</span><span class='line'>-+<span class="o">=</span> 00001 root /sbin/launchd
</span><span class='line'> <span class="se">\-</span>+<span class="o">=</span> 00221 jtushman /sbin/launchd
</span><span class='line'>   <span class="se">\-</span>+<span class="o">=</span> 00446 jtushman /Applications/iTerm.app/Contents/MacOS/iTerm -psn_0_188462
</span><span class='line'>     <span class="se">\-</span>+<span class="o">=</span> 07770 root login -fp jtushman
</span><span class='line'>       <span class="se">\-</span>+<span class="o">=</span> 07771 jtushman -zsh
</span><span class='line'>         <span class="se">\-</span>+<span class="o">=</span> 46662 jtushman python multi3.py
</span><span class='line'>           |--- 46663 jtushman python multi3.py
</span><span class='line'>           |--- 46664 jtushman python multi3.py
</span><span class='line'>           |--- 46665 jtushman python multi3.py
</span><span class='line'>           |--- 46666 jtushman python multi3.py
</span><span class='line'>           <span class="se">\-</span>-- 46667 jtushman python multi3.py
</span></code></pre></td></tr></table></div></figure>


<h4>Know your options</h4>

<p>There are more then one paralyzation framework / paradigms out there for python.  Make sure you pick the right one for you before you dive-in.  To name a few:</p>

<ul>
<li><a href="http://docs.python.org/2/library/threading.html">python threading</a></li>
<li><a href="http://www.gevent.org///">greenlets and gevent</a></li>
<li><a href="http://www.celeryproject.org/">celery</a></li>
</ul>


<p><strong>Important</strong>: Unless you are a ninja &mdash; do not mix paradigms.  For example if you are using the multiprocessing library &mdash; do not use threading.locals</p>

<h2>The Main Story</h2>

<h3>Axiom One:  All child processes get SIG-INT</h3>

<p><strong>Note:</strong> I will use SIG_INT, Keyboard Interrupt, and Ctr-C interchangablely</p>

<p>Consider the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">multiprocessing</span> <span class="kn">import</span> <span class="n">Process</span><span class="p">,</span> <span class="n">Manager</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">time</span> <span class="kn">import</span> <span class="n">sleep</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">f</span><span class="p">(</span><span class="n">process_number</span><span class="p">):</span>
</span><span class='line'>    <span class="k">try</span><span class="p">:</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&quot;starting thread: &quot;</span><span class="p">,</span> <span class="n">process_number</span>
</span><span class='line'>        <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
</span><span class='line'>            <span class="k">print</span> <span class="n">process_number</span>
</span><span class='line'>            <span class="n">sleep</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
</span><span class='line'>    <span class="k">except</span> <span class="ne">KeyboardInterrupt</span><span class="p">:</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&quot;Keyboard interupt in process: &quot;</span><span class="p">,</span> <span class="n">process_number</span>
</span><span class='line'>    <span class="k">finally</span><span class="p">:</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&quot;cleaning up thread&quot;</span><span class="p">,</span> <span class="n">process_number</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">processes</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">manager</span> <span class="o">=</span> <span class="n">Manager</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="mi">4</span><span class="p">):</span>
</span><span class='line'>        <span class="n">p</span> <span class="o">=</span> <span class="n">Process</span><span class="p">(</span><span class="n">target</span><span class="o">=</span><span class="n">f</span><span class="p">,</span> <span class="n">args</span><span class="o">=</span><span class="p">(</span><span class="n">i</span><span class="p">,))</span>
</span><span class='line'>        <span class="n">p</span><span class="o">.</span><span class="n">start</span><span class="p">()</span>
</span><span class='line'>        <span class="n">processes</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">p</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">try</span><span class="p">:</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">process</span> <span class="ow">in</span> <span class="n">processes</span><span class="p">:</span>
</span><span class='line'>            <span class="n">process</span><span class="o">.</span><span class="n">join</span><span class="p">()</span>
</span><span class='line'>    <span class="k">except</span> <span class="ne">KeyboardInterrupt</span><span class="p">:</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&quot;Keyboard interrupt in main&quot;</span>
</span><span class='line'>    <span class="k">finally</span><span class="p">:</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&quot;Cleaning up Main&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The abbreviated output you get is as follows:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>^C
</span><span class='line'>Keyboard interupt in process:  3
</span><span class='line'>Keyboard interupt in process:  0
</span><span class='line'>Keyboard interupt in process:  2
</span><span class='line'>cleaning up thread 3
</span><span class='line'>cleaning up thread 0
</span><span class='line'>cleaning up thread 2
</span><span class='line'>Keyboard interupt in process:  1
</span><span class='line'>cleaning up thread 1
</span><span class='line'>Keyboard interupt in main
</span><span class='line'>Cleaning up Main
</span></code></pre></td></tr></table></div></figure>


<p>The main take aways are:</p>

<ul>
<li>Keyboard interrupt gets send to each sub process and main execution</li>
<li>the order in which the run is non-determanistic</li>
</ul>


<h3>Axiom Two:  Beware multiprocessing.Manager (time to share memory between processes)</h3>

<p>If it is possible in your stack to rely on a database, such as redis for keeping track of shared state &mdash; I recommend it.  But if you need a pure python solution read on:</p>

<p><a href="http://docs.python.org/2/library/multiprocessing.html#managers">multiprocessing.Manager</a> bill themselves as:</p>

<blockquote><p>Managers provide a way to create data which can be shared between different processes.  <strong>A manager object controls a server process</strong> which manages shared objects. Other processes can access the shared objects by using proxies.</p></blockquote>

<p>The key take away there is that the Manager actually kicks off a server process to manage state.  Its like it is firing up your own little (not battle tested) private database.  And if you Ctr-C your python process the manager will get the signal and shut it self down causing all sorts of weirdness.</p>

<p>Consider the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">multiprocessing</span> <span class="kn">import</span> <span class="n">Process</span><span class="p">,</span> <span class="n">Manager</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">time</span> <span class="kn">import</span> <span class="n">sleep</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">f</span><span class="p">(</span><span class="n">process_number</span><span class="p">,</span> <span class="n">shared_array</span><span class="p">):</span>
</span><span class='line'>    <span class="k">try</span><span class="p">:</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&quot;starting thread: &quot;</span><span class="p">,</span> <span class="n">process_number</span>
</span><span class='line'>        <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
</span><span class='line'>            <span class="n">shared_array</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">process_number</span><span class="p">)</span>
</span><span class='line'>            <span class="n">sleep</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
</span><span class='line'>    <span class="k">except</span> <span class="ne">KeyboardInterrupt</span><span class="p">:</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&quot;Keyboard interupt in process: &quot;</span><span class="p">,</span> <span class="n">process_number</span>
</span><span class='line'>    <span class="k">finally</span><span class="p">:</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&quot;cleaning up thread&quot;</span><span class="p">,</span> <span class="n">process_number</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">processes</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">manager</span> <span class="o">=</span> <span class="n">Manager</span><span class="p">()</span>
</span><span class='line'>    <span class="n">shared_array</span> <span class="o">=</span> <span class="n">manager</span><span class="o">.</span><span class="n">list</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="mi">4</span><span class="p">):</span>
</span><span class='line'>        <span class="n">p</span> <span class="o">=</span> <span class="n">Process</span><span class="p">(</span><span class="n">target</span><span class="o">=</span><span class="n">f</span><span class="p">,</span> <span class="n">args</span><span class="o">=</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">shared_array</span><span class="p">))</span>
</span><span class='line'>        <span class="n">p</span><span class="o">.</span><span class="n">start</span><span class="p">()</span>
</span><span class='line'>        <span class="n">processes</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">p</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">try</span><span class="p">:</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">process</span> <span class="ow">in</span> <span class="n">processes</span><span class="p">:</span>
</span><span class='line'>            <span class="n">process</span><span class="o">.</span><span class="n">join</span><span class="p">()</span>
</span><span class='line'>    <span class="k">except</span> <span class="ne">KeyboardInterrupt</span><span class="p">:</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&quot;Keyboard interrupt in main&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">shared_array</span><span class="p">:</span>
</span><span class='line'>        <span class="c"># raises &quot;socket.error: [Errno 2] No such file or directory&quot;</span>
</span><span class='line'>        <span class="k">print</span> <span class="n">item</span>
</span></code></pre></td></tr></table></div></figure>


<p>Try running that and interrupting it was a Ctr-C, you will get a weird error:</p>

<p>You will get a <code>socket.error: [Errno 2] No such file or directory</code> when trying to access the shared_array.  And thats because the Manager process has been interrupted.</p>

<p><strong>There is a solution!</strong></p>

<h3>Axiom Two:  Explicitly use multiprocessing.manangers.SyncManger to share state</h3>

<p>and use the signals library to have the SyncManager ignore the interrupt signal (SIG_INT)</p>

<p>Consider the following code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">multiprocessing</span> <span class="kn">import</span> <span class="n">Process</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">multiprocessing.managers</span> <span class="kn">import</span> <span class="n">SyncManager</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">signal</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">time</span> <span class="kn">import</span> <span class="n">sleep</span>
</span><span class='line'>
</span><span class='line'><span class="c"># initializer for SyncManager</span>
</span><span class='line'><span class="k">def</span> <span class="nf">mgr_init</span><span class="p">():</span>
</span><span class='line'>    <span class="n">signal</span><span class="o">.</span><span class="n">signal</span><span class="p">(</span><span class="n">signal</span><span class="o">.</span><span class="n">SIGINT</span><span class="p">,</span> <span class="n">signal</span><span class="o">.</span><span class="n">SIG_IGN</span><span class="p">)</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&#39;initialized manager&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">f</span><span class="p">(</span><span class="n">process_number</span><span class="p">,</span> <span class="n">shared_array</span><span class="p">):</span>
</span><span class='line'>    <span class="k">try</span><span class="p">:</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&quot;starting thread: &quot;</span><span class="p">,</span> <span class="n">process_number</span>
</span><span class='line'>        <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
</span><span class='line'>            <span class="n">shared_array</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">process_number</span><span class="p">)</span>
</span><span class='line'>            <span class="n">sleep</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
</span><span class='line'>    <span class="k">except</span> <span class="ne">KeyboardInterrupt</span><span class="p">:</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&quot;Keyboard interrupt in process: &quot;</span><span class="p">,</span> <span class="n">process_number</span>
</span><span class='line'>    <span class="k">finally</span><span class="p">:</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&quot;cleaning up thread&quot;</span><span class="p">,</span> <span class="n">process_number</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">processes</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>
</span><span class='line'>  <span class="c"># now using SyncManager vs a Manager</span>
</span><span class='line'>    <span class="n">manager</span> <span class="o">=</span> <span class="n">SyncManager</span><span class="p">()</span>
</span><span class='line'>    <span class="c"># explicitly starting the manager, and telling it to ignore the interrupt signal</span>
</span><span class='line'>    <span class="n">manager</span><span class="o">.</span><span class="n">start</span><span class="p">(</span><span class="n">mgr_init</span><span class="p">)</span>
</span><span class='line'>    <span class="k">try</span><span class="p">:</span>
</span><span class='line'>        <span class="n">shared_array</span> <span class="o">=</span> <span class="n">manager</span><span class="o">.</span><span class="n">list</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="mi">4</span><span class="p">):</span>
</span><span class='line'>            <span class="n">p</span> <span class="o">=</span> <span class="n">Process</span><span class="p">(</span><span class="n">target</span><span class="o">=</span><span class="n">f</span><span class="p">,</span> <span class="n">args</span><span class="o">=</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">shared_array</span><span class="p">))</span>
</span><span class='line'>            <span class="n">p</span><span class="o">.</span><span class="n">start</span><span class="p">()</span>
</span><span class='line'>            <span class="n">processes</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">p</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">try</span><span class="p">:</span>
</span><span class='line'>            <span class="k">for</span> <span class="n">process</span> <span class="ow">in</span> <span class="n">processes</span><span class="p">:</span>
</span><span class='line'>                <span class="n">process</span><span class="o">.</span><span class="n">join</span><span class="p">()</span>
</span><span class='line'>        <span class="k">except</span> <span class="ne">KeyboardInterrupt</span><span class="p">:</span>
</span><span class='line'>            <span class="k">print</span> <span class="s">&quot;Keyboard interrupt in main&quot;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">shared_array</span><span class="p">:</span>
</span><span class='line'>            <span class="c"># we still have access to it!  Yay!</span>
</span><span class='line'>            <span class="k">print</span> <span class="n">item</span>
</span><span class='line'>    <span class="k">finally</span><span class="p">:</span>
</span><span class='line'>      <span class="c"># to be safe -- explicitly shutting down the manager</span>
</span><span class='line'>        <span class="n">manager</span><span class="o">.</span><span class="n">shutdown</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>Main take aways here are:</p>

<ul>
<li>Explicitly using and starting a SyncManager (instead of Manager)</li>
<li>on its initialization having it ignore the interrupt</li>
</ul>


<p>I will do a future post on gracefully shutting down child threads (once I figure that out ;&ndash;)</p>

<p>Thanks to @armsteady, who showed me the like on StackOverflow (<a href="http://stackoverflow.com/a/21106459/192791">link</a>)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dict Digger]]></title>
    <link href="http://jtushman.github.io/blog/2013/11/06/dict-digger/"/>
    <updated>2013-11-06T18:18:00-05:00</updated>
    <id>http://jtushman.github.io/blog/2013/11/06/dict-digger</id>
    <content type="html"><![CDATA[<p>In the age or SaaS, and working with 3rd part APIs developers often have to navigate a complex object (arrays of hashes of arrays or hashes) (I am looking at you Adwords API)</p>

<p>I wanted a nice way to avoid doing None checks and does this key exist over and over again.</p>

<p>So I made a (very) simple utility to help with it <a href="https://github.com/jtushman/dict_digger"><em>dict_digger</em></a></p>

<p>And works like this …</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>pip install dict_digger
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">dict_digger</span>
</span><span class='line'>
</span><span class='line'><span class="n">h</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="s">&#39;a&#39;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>         <span class="s">&#39;b&#39;</span><span class="p">:</span> <span class="s">&#39;tuna&#39;</span><span class="p">,</span>
</span><span class='line'>         <span class="s">&#39;c&#39;</span><span class="p">:</span> <span class="s">&#39;fish&#39;</span>
</span><span class='line'>     <span class="p">},</span>
</span><span class='line'>     <span class="s">&#39;b&#39;</span><span class="p">:</span> <span class="p">{}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">result</span> <span class="o">=</span> <span class="n">dict_digger</span><span class="o">.</span><span class="n">dig</span><span class="p">(</span><span class="n">h</span><span class="p">,</span> <span class="s">&#39;a&#39;</span><span class="p">,</span><span class="s">&#39;b&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="n">result</span>  <span class="c"># prints &#39;tuna&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">result</span> <span class="o">=</span> <span class="n">dict_digger</span><span class="o">.</span><span class="n">dig</span><span class="p">(</span><span class="n">h</span><span class="p">,</span> <span class="s">&#39;c&#39;</span><span class="p">,</span><span class="s">&#39;a&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="n">result</span> <span class="c"># prints None</span>
</span><span class='line'><span class="c"># Important!!  Does not through an error, just returns None</span>
</span><span class='line'>
</span><span class='line'><span class="c">#but if you like</span>
</span><span class='line'><span class="n">result</span> <span class="o">=</span> <span class="n">dict_digger</span><span class="o">.</span><span class="n">dig</span><span class="p">(</span><span class="n">h</span><span class="p">,</span> <span class="s">&#39;c&#39;</span><span class="p">,</span><span class="s">&#39;a&#39;</span><span class="p">,</span> <span class="n">fail</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span><span class='line'><span class="c"># raises a KeyError</span>
</span><span class='line'>
</span><span class='line'><span class="c"># also support complex objects so ...</span>
</span><span class='line'>
</span><span class='line'><span class="nb">complex</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="s">&#39;a&#39;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>         <span class="p">[</span><span class="s">&#39;tuna&#39;</span><span class="p">,</span><span class="s">&#39;fish&#39;</span><span class="p">]</span>
</span><span class='line'>     <span class="p">},</span>
</span><span class='line'>     <span class="s">&#39;b&#39;</span><span class="p">:</span> <span class="p">{}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">result</span> <span class="o">=</span> <span class="n">dict_digger</span><span class="o">.</span><span class="n">dig</span><span class="p">(</span><span class="nb">complex</span><span class="p">,</span> <span class="s">&#39;a&#39;</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="n">result</span> <span class="c">#prints tuna</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Alternatively you do the following</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">try</span><span class="p">:</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">=</span> <span class="n">h</span><span class="p">[</span><span class="s">&#39;c&#39;</span><span class="p">][</span><span class="s">&#39;a&#39;</span><span class="p">]</span>
</span><span class='line'><span class="k">except</span> <span class="ne">KeyError</span><span class="p">:</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">=</span> <span class="bp">None</span>
</span></code></pre></td></tr></table></div></figure>


<p>Find it on github <a href="https://github.com/jtushman/dict_digger">here</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Shuffling Team Seating]]></title>
    <link href="http://jtushman.github.io/blog/2013/10/10/shuffling-team-seating/"/>
    <updated>2013-10-10T21:29:00-04:00</updated>
    <id>http://jtushman.github.io/blog/2013/10/10/shuffling-team-seating</id>
    <content type="html"><![CDATA[<p>I think it is good to shuffle the team around.  Helps with cross-pollination, and keeps the team area neat.  Here is the function that we use to randomize our team making sure that you do not sit next to someone you are already sitting next to.</p>

<p>Note:  Only works with teams greater than four.  Assign each space in your office an number, the run the following.  The first person in the outputted array goes in space 1, and so on.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">random</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">all_perms</span><span class="p">(</span><span class="n">elements</span><span class="p">):</span>
</span><span class='line'>    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">elements</span><span class="p">)</span> <span class="o">&lt;=</span><span class="mi">1</span><span class="p">:</span>
</span><span class='line'>        <span class="k">yield</span> <span class="n">elements</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">perm</span> <span class="ow">in</span> <span class="n">all_perms</span><span class="p">(</span><span class="n">elements</span><span class="p">[</span><span class="mi">1</span><span class="p">:]):</span>
</span><span class='line'>            <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">elements</span><span class="p">)):</span>
</span><span class='line'>                <span class="c">#nb elements[0:1] works in both string and list contexts</span>
</span><span class='line'>                <span class="k">yield</span> <span class="n">perm</span><span class="p">[:</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="n">elements</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="n">perm</span><span class="p">[</span><span class="n">i</span><span class="p">:]</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">find_position</span><span class="p">(</span><span class="n">key</span><span class="p">,</span><span class="n">lizt</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="n">i</span> <span class="k">for</span> <span class="n">i</span><span class="p">,</span><span class="n">x</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">lizt</span><span class="p">)</span> <span class="k">if</span> <span class="n">x</span> <span class="o">==</span> <span class="n">key</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">new_neighbors</span><span class="p">(</span><span class="n">some_list</span><span class="p">):</span>
</span><span class='line'>    <span class="n">new_neighbor_list</span> <span class="o">=</span> <span class="n">some_list</span><span class="p">[:]</span>
</span><span class='line'>    <span class="n">list_size</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">some_list</span><span class="p">)</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">new_neighbor_list</span> <span class="ow">in</span> <span class="n">all_perms</span><span class="p">(</span><span class="n">some_list</span><span class="p">):</span>
</span><span class='line'>        <span class="k">print</span> <span class="n">new_neighbor_list</span>
</span><span class='line'>        <span class="n">too_many_neighbors</span> <span class="o">=</span> <span class="bp">False</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">i</span><span class="p">,</span><span class="n">team_member</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">new_neighbor_list</span><span class="p">):</span>
</span><span class='line'>            <span class="c">#find position in inital list</span>
</span><span class='line'>            <span class="n">position_in_original_list</span> <span class="o">=</span> <span class="n">find_position</span><span class="p">(</span><span class="n">team_member</span><span class="p">,</span><span class="n">some_list</span><span class="p">)</span>
</span><span class='line'>            <span class="n">original_neighbors</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>            <span class="n">original_neighbors</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">some_list</span><span class="p">[(</span><span class="n">position_in_original_list</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="o">%</span> <span class="n">list_size</span><span class="p">])</span>
</span><span class='line'>            <span class="n">original_neighbors</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">some_list</span><span class="p">[(</span><span class="n">position_in_original_list</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">%</span> <span class="n">list_size</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">new_neighbors</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>            <span class="n">new_neighbors</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">new_neighbor_list</span><span class="p">[(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="o">%</span> <span class="n">list_size</span><span class="p">])</span>
</span><span class='line'>            <span class="n">new_neighbors</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">new_neighbor_list</span><span class="p">[(</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">%</span> <span class="n">list_size</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">delta</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="nb">set</span><span class="p">(</span><span class="n">new_neighbors</span><span class="p">)</span> <span class="o">-</span> <span class="nb">set</span><span class="p">(</span><span class="n">original_neighbors</span><span class="p">))</span>
</span><span class='line'>            <span class="c">#print &quot;for {} comparing: {} with {} = {}&quot;.format(team_member,original_neighbors,new_neighbors,delta)</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span> <span class="ow">not</span> <span class="n">delta</span> <span class="o">==</span> <span class="mi">2</span><span class="p">:</span>
</span><span class='line'>               <span class="n">too_many_neighbors</span> <span class="o">=</span> <span class="bp">True</span>
</span><span class='line'>               <span class="k">break</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="n">too_many_neighbors</span> <span class="o">==</span> <span class="bp">False</span><span class="p">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">new_neighbor_list</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&quot;No Matches&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="p">[]</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c"># Usage      </span>
</span><span class='line'><span class="n">team</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;JT&#39;</span><span class="p">,</span><span class="s">&#39;FS&#39;</span><span class="p">,</span><span class="s">&#39;MC&#39;</span><span class="p">,</span><span class="s">&#39;MA&#39;</span><span class="p">,</span><span class="s">&#39;FD&#39;</span><span class="p">]</span>
</span><span class='line'><span class="n">new_seating</span> <span class="o">=</span> <span class="n">new_neighbors</span><span class="p">(</span><span class="n">team</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="n">new_seating</span>
</span><span class='line'><span class="c"># &gt;&gt; [&#39;MC&#39;, &#39;JT&#39;, &#39;MA&#39;, &#39;PS&#39;, &#39;FD&#39;]</span>
</span></code></pre></td></tr></table></div></figure>


<p>To end with an quote to motivate:</p>

<blockquote><p>Everyday I&rsquo;m shufflin&#8217; &mdash; LMFAO</p></blockquote>

<iframe width="100%" height="400" src="http://www.youtube.com/embed/6RKwyKNEWRY" frameborder="0" allowfullscreen></iframe>


<p>(you can play that music as you are shuffling&#8217; seats)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introducing pivotal_tools]]></title>
    <link href="http://jtushman.github.io/blog/2013/08/15/introducing-pivotal-tools/"/>
    <updated>2013-08-15T08:56:00-04:00</updated>
    <id>http://jtushman.github.io/blog/2013/08/15/introducing-pivotal-tools</id>
    <content type="html"><![CDATA[<p>At ZEFR we are using Pivotal Tracker to help us with our Agile workflow.  Its a great tool, but we created a couple of command-line utilities that help us with our process.  We have found these to be real time-savers and helped up tighten up our process.</p>

<p>We have collected these utils into a python package <a href="https://github.com/jtushman/pivotal_tools">pivotal_tools</a>.  The 4 most useful utilities for us are:</p>

<ul>
<li><code>pivotal_tools scrum</code> : helps facilitate and visualize our daily scrum meetings</li>
<li><code>pivotal_tools planning</code>: (aka <code>pivotal_tools poker</code>) : helps facilitate our weekly estimation sessions</li>
<li><code>pivotal_tools changelog</code>: generates a changelog for all of delivered stories</li>
<li><code>pivotal_tools create (bug|feature|chore)</code>: creates an a story</li>
</ul>


<p>To install:</p>

<figure class='code'><figcaption><span>Install </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>pip install pivotal_tools
</span></code></pre></td></tr></table></div></figure>


<p>If you are a screencast person &mdash; have a watch (5min), alternatively there are screenshots and descriptions below the fold:</p>

<iframe width="100%" height="400" src="http://jtushman.github.io//www.youtube.com/embed/Pzsxssc30uE" frameborder="0" allowfullscreen></iframe>


<hr />

<h2>Sample Project</h2>

<p>Lets say you have project like the following:</p>

<p><img class="center" src="http://jtushman.github.io/images/pivotal_tracker.png"></p>

<h2><code>pivotal_tools show_stories</code></h2>

<p>Lists the top 20 stories.  Useful if you are looking for what story to pick up next</p>

<p><img class="center" src="http://jtushman.github.io/images/show_stories.png"></p>

<h2><code>pivotal_tools poker</code></h2>

<p>also can be run with <code>pivotal_tools planning</code>.  Iterates over your unestimated features, giving you a minimalist view of the feature.  Prompting the team for an estimate.</p>

<p><img class="center" src="http://jtushman.github.io/images/poker.png" title="pivotal tracker" alt="pivotal tracker"></p>

<h2><code>pivotal_tools scrum</code></h2>

<p>We use this tool for our daily scrum.  Simply shows what each member is working on.</p>

<p><img class="center" src="http://jtushman.github.io/images/scrum.png"></p>

<h2><code>pivotal_tools changelog</code></h2>

<p>During the release process, we use this to generate a change log that keeps our business owners in the loop.  We also use this during our scrum, to see what has been delivered in the current iteration.</p>

<p><img class="center" src="http://jtushman.github.io/images/changelog.png"></p>

<h2>Feedback</h2>

<p>Hopefully this will be a useful utility for others.  Feel free to fork and comment.  The repo is on github <a href="https://github.com/jtushman/pivotal_tools">(here)</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Give Constructive Feedback To An Engineer]]></title>
    <link href="http://jtushman.github.io/blog/2013/06/19/how-to-give-constructive_feedback-to-an-engineer/"/>
    <updated>2013-06-19T21:02:00-04:00</updated>
    <id>http://jtushman.github.io/blog/2013/06/19/how-to-give-constructive_feedback-to-an-engineer</id>
    <content type="html"><![CDATA[<p>(I&rsquo;ll give you a hint &mdash; it&rsquo;s not down-voting, or one-liner emails)</p>

<p><strong>tl;dr:  Preface your constructive feedback with a compliment.  And end the conversations with additional positive feedback.  Make the negative feedback precise and timely</strong></p>

<p>First, here is my FAVORITE clip of a boss giving his employee feedback</p>

<blockquote><p>Everything you&rsquo;re doing is bad, I want you to know this</p></blockquote>

<iframe width="100%" height="400" src="http://www.youtube.com/embed/ncGHiVKJh0Y" frameborder="0" allowfullscreen></iframe>


<p><strong>We engineers, for whatever reason are a sensitive bunch.</strong>  We are internally programmed to strive to get the acceptance of others.  Whether its gaining cread on StackOverflow, Getting up voted on Reddit, or more frequently, trying to impress your boss and peers.</p>

<p>We can take it as fact that giving and receiving feedback is a Good Thing.</p>

<p>But if it is not presented well, it can have some unnecessary consequences.  What we want to happen is have the person receiving the feedback, process it and hopefully take it to heart.</p>

<p>What we do not want to happen is to make the receiver get defensive or feel bad.</p>

<p>What works for me (and for others) is to <strong>wrap the constructive feedback with positive feedback</strong>.  For example:</p>

<blockquote><p>Jonathan, you clearly have been putting a lot of work into your blog.  It has some really great ideas in here.  I particularly liked your article about buying socks.</p>

<p>But, everything you are writing about has been written about already.  Have you seen this <a href="http://www.nytimes.com/2013/04/06/your-money/how-to-give-effective-feedback-both-positive-and-negative.html?pagewanted=all&amp;_r=0">New York Times Article</a> about giving feedback &mdash; its pretty solid?  I recommend doing a bit more research before posting</p>

<p>I do really enjoy your posts, and I look forward to reading more!</p></blockquote>

<p>Just as important, is the timing of the feedback.  Don&rsquo;t wait until your quarterly review.  If you have a way that a colleague could run a meeting better &mdash; tell her right afterwards.  Try to build a culture of real-time feedback.</p>

<p>Now, this is not a silver bullet.  I have also heard this approach called a &ldquo;sh*t sandwich&rdquo;.  And if it is used too much &mdash; or without sincerity, it will not be effective.  But, I think its a good arrow to put into your feedback quiver.</p>

<p>And just because this is a engineering blog &hellip;</p>

<figure class='code'><figcaption><span>feedback.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">random</span> <span class="kn">import</span> <span class="n">choice</span>
</span><span class='line'>
</span><span class='line'><span class="n">beginning_affirmation</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>  <span class="s">&quot;I like what you are doing here&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s">&quot;Nice use of a context manager, you should share that with the rest of the team&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s">&quot;I can not believe how much you have accomplished already&quot;</span>
</span><span class='line'><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">ending_affirmation</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>  <span class="s">&quot;Dude, I am pumped the direction this is heading&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s">&quot;Really good work&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s">&quot;Hey, lets grab lunch&quot;</span><span class="p">,</span>
</span><span class='line'><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">constructive_feedback</span><span class="p">(</span><span class="n">feedback</span><span class="p">):</span>
</span><span class='line'>  <span class="k">return</span> <span class="s">&quot;{} but, {}. {}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">choice</span><span class="p">(</span><span class="n">beginning_affirmation</span><span class="p">),</span><span class="n">feedback</span><span class="p">,</span><span class="n">choice</span><span class="p">(</span><span class="n">ending_affirmation</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="c"># and so …</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="n">constructive_feedback</span><span class="p">(</span><span class="s">&quot;More cowbell&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c">#yields: &#39;Nice use of a context manager, you should share that with the rest of the team but, More cowbell. Hey, lets grab lunch&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>And dare I ask ….  feedback?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sharing Code Across Applications with Python]]></title>
    <link href="http://jtushman.github.io/blog/2013/06/17/sharing-code-across-applications-with-python/"/>
    <updated>2013-06-17T12:20:00-04:00</updated>
    <id>http://jtushman.github.io/blog/2013/06/17/sharing-code-across-applications-with-python</id>
    <content type="html"><![CDATA[<h3>tl;dr:  Use pip, git(hub) and tags to share packages privately amongst your team</h3>

<p><strong>Problem Statement</strong>  We have libraries that we need to share across multiple applications.  Using Git submodules, makes me cry &mdash; there has to be a better way (and there is)</p>

<p>I am going to break this up into three sections:</p>

<ul>
<li><a href="#1">Packaging Python</a> (this needs to happen regardless of how you share)</li>
<li><a href="#2">Sharing Publicly</a> (with the world via PyPi)</li>
<li><a href="#3">Sharing Privately</a> (within your organization, with pip and git)</li>
</ul>


<p><a id="1"></a></p>

<h2>Packaging Python</h2>

<p>This section needs to happen regardless if you share in the public domain or privately</p>

<p>Python (our beloved language with bells and whistles) has <a href="https://pypi.python.org/pypi/setuptools/0.7.2"><code>setuptools</code></a> built in that we can use to package our utility.</p>

<p>I really do not having anything to say that hasn&rsquo;t been said before.  I found this tutorial to be excellent:</p>

<blockquote><p><a href="http://www.scotttorborg.com/python-packaging/minimal.html">http://www.scotttorborg.com/python-packaging/minimal.html</a></p></blockquote>

<p>But the gist of it is:</p>

<ol>
<li>create a <code>setup.py</code> (to define whats to be shared using <code>setuptools</code>)</li>
<li>Gotsta have README.rst (sharing code with documenting it is useless)</li>
<li>Test it locally</li>
<li>Use <a href="http://semver.org/">Semantic Versioning</a> (or you are a bad person)</li>
</ol>


<p><a id="2"></a></p>

<h2>Sharing in the public domain</h2>

<p>Okay, you wrote an amazing utility and want to share it with the world.  I really was blown away how easy it was to do this with thanks to PyPi (Python Package Index) (aka the Cheeseshop)</p>

<p>For this example, I wrote a package called <code>human_dates</code>  That takes some of the syntax sugar from the ruby and rails world and brings it over to python land.</p>

<p>You can find the code <a href="https://github.com/jtushman/human_dates">here</a></p>

<p>And you will see the light if you continue reading the <a href="http://www.scotttorborg.com/python-packaging/minimal.html">packaging tutorial from the first section</a></p>

<p>Once you have you package tested locally, its as simple as:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>python setup.py register
</span><span class='line'><span class="nv">$ </span>python setup.py sdist upload
</span></code></pre></td></tr></table></div></figure>


<p>And now anyone can do the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>pip install human_dates
</span></code></pre></td></tr></table></div></figure>


<p>And then in a python console, you can:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">human_dates</span> <span class="kn">import</span> <span class="n">time_ago_in_words</span><span class="p">,</span> <span class="n">beginning_of_day</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="n">time_ago_in_words</span><span class="p">()</span>
</span><span class='line'><span class="c">#prints &quot;just now&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="n">time_ago_in_words</span><span class="p">(</span><span class="n">beginning_of_day</span><span class="p">())</span>
</span><span class='line'><span class="c"># prints 8 hours ago</span>
</span></code></pre></td></tr></table></div></figure>


<p>AWESOME!  I really enjoyed this experience.  <strong>I found the overhead very light for creating reusable components.</strong></p>

<p>Also &mdash; if this still sounds like to much work for you &mdash; the <em>least</em> you can do is just write and share a <a href="https://gist.github.com/">gist</a> of your snippet.</p>

<p><a id="3"></a></p>

<h2>Sharing in the private domain (within your company)</h2>

<p>Okay, now things get a bit more interesting.  You have a key component that is used in multiple code bases.  What is the best way to share that.  But we need to, a la Gandalf: &ldquo;Keep it secret, keep it safe&rdquo;</p>

<iframe width="100%" height="315" src="http://www.youtube.com/embed/_YhpauKGgQ4" frameborder="0" allowfullscreen></iframe>


<p>Our Requirements:</p>

<ul>
<li>The sharing should be done via pip, and the requirements.txt file</li>
<li>I do not want to set up my own pypi server</li>
<li>It needs to be secure within our organization</li>
<li>But, needs to be deployable to 3rd party PaaS providers like heroku or elastic beanstalk</li>
</ul>


<br/>


<p>To accomplish this, I am using pip&rsquo;s ability to interact with git over ssh.  That and git tagging.  Here are the steps that I took &hellip;</p>

<ul>
<li>Create a private git repo (I am using github)</li>
<li><p>Make your package, just like we did before.  For this example I will share piece of code that I use to inspect into dictionaries. <a href="https://github.com/jtushman/dict_digger">here is the project</a> (note: its public to share with you guys &mdash; but it the real use case it MUST be private.)</p></li>
<li><p>push to github.  It needs to have all the same trappings of a python package you would push to PyPi</p></li>
<li><p>When working with git and pip, you need to go through an additional step of explicitly tagging your versions</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git tag -a v0.1.0 -m <span class="s1">&#39;version 0.1.0 initial version&#39;</span>
</span><span class='line'>git push --tags
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>For YOU to install the most current version from HEAD, we can now do the following:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>pip install git+ssh://git@github.com/jtushman/dict_digger.git
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>For YOU to install the a <strong>specific</strong> version, we can now do the following:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>pip install git+ssh://git@github.com/jtushman/dict_digger.git@v0.1.0
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>&mdash; or &mdash;</p>

<p>in your requirements.txt file</p>

<figure class='code'><figcaption><span>requirements.txt</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>requests==1.2.2
</span><span class='line'>git+ssh://git@github.com/jtushman/dict_digger.git@v0.1.0
</span></code></pre></td></tr></table></div></figure>


<p><strong>At this point, your colleagues and deployment machines WILL NOT be able to access this package</strong></p>

<p>Time to provision them &hellip;</p>

<ul>
<li><p>For your colleagues to access this library:</p>

<ol>
<li> First they will need to have access to your github repository.  So make sure you have added her/them as collaborators.  Best handled on the github website</li>
<li> They will need to turn on ssh agent forwarding.  Following instructions (<a href="https://help.github.com/articles/using-ssh-agent-forwarding">here</a>)</li>
</ol>
</li>
<li><p>For your deployment machines to access the library.  You will need to follow the following two steps:</p>

<ol>
<li> Create a <a href="https://help.github.com/articles/managing-deploy-keys#machine-users">Machine User</a></li>
<li> Add the ssh keys to your deploy machine.  If you are using heroku.  Its as simple as <a href="https://devcenter.heroku.com/articles/keys#adding-keys-to-heroku">this</a></li>
</ol>
</li>
</ul>


<p>Note:  As an alternative you can host your own secure <a href="https://pypi.python.org/pypi/pypiserver">PyPi server</a>.</p>

<p>What I really like about the GitHub approach is ( a ) all of the ACL heavy lift is handled by GitHub, and ( b ) they are responsible for keeping their server up.</p>

<p>Cool &mdash; this is working for me.  Love to hear others thoughts and successful approaches.</p>

<hr />

<p>Other interesting articles while researching this &hellip;</p>

<ul>
<li><a href="http://lucumr.pocoo.org/2012/6/22/hate-hate-hate-everywhere/">Angry Armin on Packaging</a></li>
<li><a href="http://blog.mozilla.org/webdev/2013/01/11/switching-to-pip-for-python-deployments/">Mozilla on moving from submodules to pip</a></li>
<li><a href="https://github.com/kennethreitz/requests/blob/master/setup.py">When in doubt do what Kenneth does</a>
<a href="https://jamiecurle.co.uk/blog/my-first-experience-adding-package-pypi/">Another nice article (with impressive formatting)</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[First impressions with Flask and Elastic Beanstalk]]></title>
    <link href="http://jtushman.github.io/blog/2013/06/12/first-impressions-with-flask-and-elastic-beanstalk/"/>
    <updated>2013-06-12T10:16:00-04:00</updated>
    <id>http://jtushman.github.io/blog/2013/06/12/first-impressions-with-flask-and-elastic-beanstalk</id>
    <content type="html"><![CDATA[<p>All in all it was pretty simple to get my flask app up and running on Elastic Beanstalk.  I ran into a couple of gotchas, and wanted to share them to save others some time.</p>

<p>I relied heavily on two tutorials to get going my first app up:</p>

<ol>
<li><a href="http://docs.aws.amazon.com/elasticbeanstalk/latest/dg/create_deploy_Python_flask.html">Deploying a Flask Application to AWS Elastic Beanstalk</a></li>
<li><a href="http://docs.aws.amazon.com/elasticbeanstalk/latest/dg/create_deploy_Python_custom_container.html">Customizing your python container</a></li>
</ol>


<h4>Three main gotchas where (see below for how to get solve / work around):</h4>

<ol>
<li><a href="#1">As of June 2013, <strong>EB only supports python 2.6</strong> (2.6.8 to be specific)</a></li>
<li><a href="#2">Make sure your container is configured to point to your static files</a></li>
<li><a href="#4">Make sure your Flask app is named application</a></li>
</ol>


<h4>Somethings that I am impressed with (again only been playing with this a day):</h4>

<ol>
<li>Fundamentally, easy to get up and running</li>
<li>Autoscaling seems to be pretty slick</li>
<li>Besides the python for the web server, the instances are highly configurable (<a href="http://docs.aws.amazon.com/elasticbeanstalk/latest/dg/customize-containers-ec2.html">docs</a>)

<ol>
<li>in particular I like the configurable services that you can attach to each instance</li>
</ol>
</li>
</ol>


<h4>Things that I am currently struggling with (but again its only been a day) are:</h4>

<ol>
<li>Can not specify python version for their WSGI</li>
<li>Not much of a community (or at least I can&rsquo;t find the community) around EB.  And so …

<ol>
<li>Forums and StackOverflow are not manned by Amazon employees, and in general is not active</li>
<li>Documentation is pretty poor</li>
<li>Few documented patterns or best practices</li>
</ol>
</li>
<li>Logging is not great (<a href="#3">more below</a>)</li>
<li>No console concept (<code>eb run python</code> &mdash;> and get an interactive python console)</li>
</ol>


<p><a id="1"></a></p>

<h2>Currently Beanstalk only supports python 2.6</h2>

<ul>
<li><p>For now the only real option is to make sure your web app runs on 2.6.  I do not think thats critical, and I am sure in time they will upgrade to 2.7 and gasp maybe 3.0.  But if you need to run a higher version &mdash; you will need to look to another solution (ec2 or heroku).</p></li>
<li><p>To get your localenv to run 2.6, make a virtualenv like so &hellip;</p>

<pre><code>  virtualenv -p /usr/bin/python2.6 your_project_name
</code></pre></li>
<li><p>And you will need to keep another session open with 2.7 or greater to work with the <code>eb</code> cli (this still makes be laugh)</p></li>
</ul>


<p><a id="2"></a></p>

<h2>Configure your container to point to your static files:</h2>

<p>If you do not do this, all of your css, javascript and all your other static goodness will bot be served.</p>

<ol>
<li>Create a <code>.ebextensions</code> folder in your project root</li>
<li>Create a [project_name].config file in that .ebextensions folder</li>
<li><p>Mine looks like the following:</p>

<pre><code> option_settings:
   "aws:elasticbeanstalk:container:python:staticfiles":
     "/static/": "static/"    
</code></pre></li>
</ol>


<p>You can read more about configuration <a href="http://docs.aws.amazon.com/elasticbeanstalk/latest/dg/customize-containers-ec2.html">here</a></p>

<p><a id="4"></a></p>

<h2>Make sure your flask app (or another WSGI app is named application)</h2>

<p>EB WSGI looks for an <code>application</code> object inside an <code>application.py</code> file in your project root.  Mine looks like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">flask</span> <span class="kn">import</span> <span class="n">Flask</span>
</span><span class='line'><span class="n">application</span> <span class="o">=</span> <span class="n">app</span> <span class="o">=</span> <span class="n">Flask</span><span class="p">(</span><span class="n">__name__</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@app.route</span><span class="p">(</span><span class="s">&quot;/&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">def</span> <span class="nf">hello</span><span class="p">():</span>
</span><span class='line'>    <span class="k">return</span> <span class="s">&quot;Hello World!&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&quot;__main__&quot;</span><span class="p">:</span>
</span><span class='line'>    <span class="n">application</span><span class="o">.</span><span class="n">run</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Other tips</h2>

<h3>Using brew to install the eb cli</h3>

<ul>
<li><p>If you are on a mac, you can use brew to install the elastic beanstalk cli (ironically you need to have python 2.7 or 3.x installed on your machine)</p>

<pre><code>  brew install aws-elasticbeanstalk
</code></pre></li>
</ul>


<p><a id="3"></a></p>

<h3>To Check out the logs</h3>

<p>You have a couple of options to check out the logs:</p>

<ol>
<li>using the CLI, <code>eb logs</code></li>
<li>going to the web console, navigate to logs, and hit &lsquo;Snapshot logs&rsquo; (<a href="http://docs.aws.amazon.com/elasticbeanstalk/latest/dg/using-features.loggingS3.title.html">docs</a>)</li>
</ol>


<p>I found the that formatting of <code>eb logs</code> in the console to be pretty unreadable.  The code is found <a href="http://aws.amazon.com/code/6752709412171743">here</a> (couldn&rsquo;t find it on github).  If I find I rely on this a lot I will probably rewrite this.  I think the main issue is three fold:</p>

<ol>
<li>They probably are giving us too much info.  They provide us separate logs from the following sources:

<ol>
<li>/opt/python/log/httpd.out</li>
<li>/var/log/httpd/error_log</li>
<li>/var/log/cfn-hup.log</li>
<li>/opt/python/log/supervisord.log</li>
<li>/var/log/eb-tools.log</li>
<li>/var/log/httpd/access_log</li>
<li>/var/log/eb-cfn-init-call.log</li>
<li>/var/log/eb-publish-logs.log</li>
<li>/var/log/cfn-init.log</li>
<li> /var/log/eb-cfn-init.log</li>
</ol>
</li>
<li>Each log is presented in a different format (I know why thats the case &mdash; but still)</li>
<li><p>And I think they are simply running <code>tail -n</code> on each each of these files. So you get the last n rows for each file, presented separately.  What I <em>really</em> want to know is what <em>just</em> happened or even better &mdash; what is happening right now (tailing).  AND to have all of these logs files interlaced and prefaced by its source.  Something like:</p>

<pre><code> [timestamp] [source=error_log] message 1
 [timestamp] [source=error_log] message 2
 [timestamp] [source=access_log] message 3
</code></pre></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A better way to manage indexes with mongoengine]]></title>
    <link href="http://jtushman.github.io/blog/2013/05/31/a-better-way-to-manage-indexes-with-mongoengine/"/>
    <updated>2013-05-31T09:44:00-04:00</updated>
    <id>http://jtushman.github.io/blog/2013/05/31/a-better-way-to-manage-indexes-with-mongoengine</id>
    <content type="html"><![CDATA[<p>I was unsatisfied with out-of-the-box solution that <a href="http://mongoengine.org/">mongoengine</a> gave me for managing indexes.  What they offer is adding some meta information to your model, and then it litters <code>ensure_indexes</code> when making calls.  There approach is shown <a href="https://mongoengine-odm.readthedocs.org/en/latest/guide/defining-documents.html#indexes">here</a></p>

<p>I find that I need more finegrained control of defining indexes, and more importantly when to kick off there creation.</p>

<p>So I added an <code>ensure_indexes()</code> method to my manage.py, and then dropped down to <code>pymongo</code> to get the control that I want</p>

<p>It looks something like this …</p>

<figure class='code'><figcaption><span>manage.py </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">pymongo</span> <span class="kn">import</span> <span class="n">ASCENDING</span><span class="p">,</span> <span class="n">DESCENDING</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">mongoengine.connection</span> <span class="kn">import</span> <span class="n">get_db</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">database</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@manager.command</span>
</span><span class='line'><span class="k">def</span> <span class="nf">ensure_indexes</span><span class="p">():</span>
</span><span class='line'>    <span class="n">database</span><span class="o">.</span><span class="n">connect</span><span class="p">()</span>
</span><span class='line'>    <span class="n">db</span> <span class="o">=</span> <span class="n">get_db</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">vt_collection</span> <span class="o">=</span> <span class="n">db</span><span class="p">[</span><span class="s">&#39;video_test&#39;</span><span class="p">]</span>
</span><span class='line'>    <span class="n">vt_collection</span><span class="o">.</span><span class="n">ensure_index</span><span class="p">([(</span><span class="s">&#39;video_batch&#39;</span><span class="p">,</span> <span class="n">ASCENDING</span><span class="p">),</span> <span class="p">(</span><span class="s">&#39;video_total_views&#39;</span><span class="p">,</span> <span class="n">DESCENDING</span><span class="p">)],</span> <span class="n">background</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span><span class='line'>    <span class="n">vt_collection</span><span class="o">.</span><span class="n">ensure_index</span><span class="p">([(</span><span class="s">&#39;video_batch&#39;</span><span class="p">,</span> <span class="n">ASCENDING</span><span class="p">),</span> <span class="p">(</span><span class="s">&#39;video_name&#39;</span><span class="p">,</span> <span class="n">ASCENDING</span><span class="p">)],</span> <span class="n">background</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="c"># show index info:</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="n">collection_name</span> <span class="ow">in</span> <span class="n">db</span><span class="o">.</span><span class="n">collection_names</span><span class="p">():</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&quot;Collection: [{}]&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">collection_name</span><span class="p">)</span>
</span><span class='line'>        <span class="n">col</span> <span class="o">=</span> <span class="n">db</span><span class="p">[</span><span class="n">collection_name</span><span class="p">]</span>
</span><span class='line'>        <span class="k">print</span> <span class="n">col</span><span class="o">.</span><span class="n">index_information</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>I like using mongoengine&rsquo;s <code>get_db()</code> method to get a handle on a pymongo database object, it centralizes the connection logic which I keep in my <code>database.py</code> file, which for completeness is here:</p>

<figure class='code'><figcaption><span>database.py </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">settings</span> <span class="kn">import</span> <span class="o">*</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">mongoengine</span>
</span><span class='line'>  
</span><span class='line'><span class="k">def</span> <span class="nf">connect</span><span class="p">():</span>
</span><span class='line'>    <span class="n">mongoengine</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="n">MONGO_DATABASE_NAME</span><span class="p">,</span> <span class="n">host</span><span class="o">=</span><span class="n">MONGO_HOST</span><span class="p">,</span> <span class="n">port</span><span class="o">=</span><span class="n">MONGO_PORT</span><span class="p">,</span>
</span><span class='line'>                        <span class="n">username</span><span class="o">=</span><span class="n">MONGO_USERNAME</span><span class="p">,</span> <span class="n">password</span><span class="o">=</span><span class="n">MONGO_PASSWORD</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>While figuring this out the following two docs to be useful:</p>

<ul>
<li><a href="http://api.mongodb.org/python/current/api/pymongo/collection.html#module-pymongo.collection">pymongo-collections</a></li>
<li><a href="http://api.mongodb.org/python/current/api/pymongo/database.html#module-pymongo.database">pymongo-database</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Order Socks Without Leaving the Terminal]]></title>
    <link href="http://jtushman.github.io/blog/2013/05/29/order-socks-without-leaving-the-terminal/"/>
    <updated>2013-05-29T19:21:00-04:00</updated>
    <id>http://jtushman.github.io/blog/2013/05/29/order-socks-without-leaving-the-terminal</id>
    <content type="html"><![CDATA[<p>We all know using the mouse is a productivity killer.  So is shopping for essentials like socks and underwear.  Here is a solution to both of these problems.</p>

<p>Zappos Labs just released an awesome new CLI for us developers to keep our eyes on the prize.</p>

<p>To use it is simple (you do need to be running ruby 1.8.7 or greater. Install instructions <a href="http://www.ruby-lang.org/en/downloads/">here</a>).</p>

<pre><code>&gt; gem install zappos_cli

&gt; zappos configure
</code></pre>

<p><code>zappos configure</code> just created a template preferences file in your home directory (~/.zappos)</p>

<p>Update the preferences file with your zappos credientials and some preferences (you will need to have an account set up online with your shipping and billing preferences).  Typically it looks like this:</p>

<pre><code>[Credentials]
zappos_username = jonathan
zappos_password = p@ssw0rd

[Preferences]
favorite_colors = ['blue', 'black', 'green']
celebrities_with_style_that_i_like = ['jack black','zach galifianakis'] 
</code></pre>

<p>Great!  Now you are all set .  Let&rsquo;s give it a spin …</p>

<pre><code>&gt; zappos order:socks --quantity=4

       mmm          mmm          mmm          mmm
  mmm  | |     mmm  | |     mmm  | |     mmm  | |
  | |  | |     | |  | |     | |  | |     | |  | |
  | |  \) \    | |  \) \    | |  \) \    | |  \) \
  \) \  \__)   \) \  \__)   \) \  \__)   \) \  \__)
   \__)         \__)         \__)         \__)
</code></pre>

<p>You just ordered some socks! Nice! (<strong>note:</strong> the current version only supports following items: <code>['socks', 'boxers', 't-shirts', 'jeans', 'shoes', 'hoodies']</code>  Enough to keep us hackers clothed.)</p>

<p>Really impressed with the ascii art &mdash; they are sweating the details.</p>

<p>Want to see the status of your order:</p>

<pre><code>&gt; zappos orders:status
</code></pre>

<p>Want to track your order:</p>

<pre><code>&gt; zappos orders:status --tail
</code></pre>

<p>I like to keep this open in a tmux pane, and I can realtime see where my socks are.</p>

<p>Don&rsquo;t like your socks.  No worries.  Returns are easy:</p>

<pre><code>&gt; zappos returns:new --order=ORDER_NUMBER
</code></pre>

<p>This will generate a pdf return label and return instructions. note: ORDER_NUMBER comes from running <code>zappos orders:status</code></p>

<p>The zappos_cli is in beta right now.  But I have found it invaluable.  Give it a shot!</p>

<br/>


<br/>


<br/>


<p><strong>JUST KIDDING!!!  But this would be sooooooooo awesome</strong>  Make it happen <a href="https://twitter.com/ZapposLabs">@ZapposLabs</a>!!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kenneth Reitz Should Be A Millionaire]]></title>
    <link href="http://jtushman.github.io/blog/2013/05/22/kenneth-reitz-should-be-a-millionaire/"/>
    <updated>2013-05-22T07:51:00-04:00</updated>
    <id>http://jtushman.github.io/blog/2013/05/22/kenneth-reitz-should-be-a-millionaire</id>
    <content type="html"><![CDATA[<h2>or &ldquo;Introducing the Dollar Store&rdquo;</h2>

<p><strong>tl;dr:  Like the apple store, we should have an easy way to pay $1 to use a piece of software.  I think <a href="https://github.com/">Github</a> should help us do that</strong></p>

<p>I went to a really greate Python Meetup last night where Kenneth Reitz (<a href="https://twitter.com/kennethreitz">@kennethreitz</a>) did his <strong>Python for Human&rsquo;s</strong> talk.  Really interesting talk, worth watching (<a href="http://www.youtube.com/watch?v=Y97D8j6CAog">link</a>).</p>

<p>@kennethreitz is, among other things, the author of the <a href="http://docs.python-requests.org/en/latest/">requests</a> library for python.  On one of his slides, he mentioned that his open-source requests libary has been downloaded 4MM times.  I that got me thinking …</p>

<blockquote><p>Kennenth Reitz should be a millionaire</p></blockquote>

<p>Now, maybe he is.  But I doubt it. But he should be.  Here&rsquo;s how &hellip;</p>

<p>So I pose a question to you developers out there:</p>

<p><strong>Whould you pay $1 to use the requests library?</strong>  Whould you pay $1 to use Flask? Rails? etc …</p>

<p>I know for me, the answer is <strong>Hell Yes!</strong>  if (and here is the important part) it is really easy, and headache free.</p>

<p>Here is my proposal &hellip;</p>

<h2>GitHub should open the <strong>&ldquo;Dollar Store&rdquo;</strong></h2>

<p>There are a lot of details that need to be worked out.  But here is the general work flow:</p>

<ul>
<li>Kenneth clicks a button on his requests project and says &mdash; &ldquo;Enable <strong>Dollar Store</strong>&rdquo;  (note: that the project can still be downloaded for free as normal)</li>
<li>I go to my github account, and click &lsquo;support the <strong>Dollar Store</strong>&rsquo;</li>
<li>Now the first time I pull down a project from gibhub with my ssl_key or what have you, if that project is in the dollar store GitHub charges me a dollar and gives it to that project owner</li>
</ul>


<p>Organizations as a whole can also support the dollar store.  I can have all of <a href="http://zefr.com">ZEFR</a> support the <strong>Dollar Store</strong>.</p>

<p>Pretty soon, Kenneth will be a millionaire and will be able to afford the laptop of his dreams.</p>

<h2>I know this open a can of worms (Haters gonna hate):</h2>

<ul>
<li>How do you allocated funds among many commitors?</li>
<li>Copyright(left) issues (This is probably the biggest hurdle now)  &mdash; But I believe surmountable</li>
</ul>


<p>But I think these are all details.  <strong>Fundamentally there is money out there that <em>wants</em> to go into smart engineers pockets</strong> &mdash; and we should find a way to greese the wheels, and make it easier for that to happen.</p>

<p>I really think that something like this will be great for innovation.  It will spur more people to contribute to &ldquo;OpenSource&rdquo;</p>

<p>In the meantime there are some alternatives to support projects like these:</p>

<ul>
<li><a href="https://www.gittip.com/kennethreitz/">Gittip</a> (right know Kenneth makes about $4,000 year for this work)</li>
<li>And you can also pay for &ldquo;<a href="https://gumroad.com/l/RRZc">enterprise support</a>&rdquo; for $25/year</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mailing It In]]></title>
    <link href="http://jtushman.github.io/blog/2013/05/17/mailing-it-in/"/>
    <updated>2013-05-17T12:10:00-04:00</updated>
    <id>http://jtushman.github.io/blog/2013/05/17/mailing-it-in</id>
    <content type="html"><![CDATA[<p>File this under, something I want, but not going to build &hellip;</p>

<p>Had another idea in the shower this morning (all of my ideas happen in the shower).</p>

<p><strong>Problem Statement:</strong>  What is an easy, non stressful way to communicate what we are working on cross coasts.  And for me the most important aspect of that is <strong>what are people struggling with</strong>, and does someone else on our growing team have knowledge to help them.</p>

<p>For example.  I was working to set up flower to monitor celery.  I mentioned that to Marc, and he said, &ldquo;I had a really bad experience with that.  It caused a pretty significant memory loss&rdquo;.  Really good to know.</p>

<p>There a bunch of tools out there, some that we use, and some that we don&rsquo;t, that solve parts of the problem:</p>

<ol>
<li><a href="https://www.pivotaltracker.com">Pivotal Tracker</a>:  What am I currently working on</li>
<li><a href="http://www.github.com">GitHub</a>:  What changes have I made to the code base(s)</li>
<li><a href="https://idonethis.com/">IDoneThis</a>: (we don&rsquo;t use this)  But it is a cool (but IMHO overpriced) tool that you simply email a quick email on what you did today.</li>
</ol>


<p>My idea I am calling <strong>Mailing It In™</strong>.  This is what I want it to do:</p>

<ol>
<li><p>Everyday you send a <a href="http://daringfireball.net/projects/markdown/syntax">markdown</a> formated email to <a href="&#109;&#97;&#105;&#108;&#x74;&#x6f;&#58;&#109;&#x61;&#105;&#x6c;&#105;&#116;&#105;&#110;&#x40;&#122;&#101;&#x66;&#114;&#x2e;&#x63;&#111;&#x6d;&#46;">&#109;&#x61;&#105;&#x6c;&#x69;&#116;&#105;&#110;&#64;&#122;&#x65;&#x66;&#114;&#x2e;&#99;&#111;&#x6d;&#46;</a>  I need to think about this more, but I think we just need to answer two questions:</p>

<ol>
<li>What am I struggling with:</li>
<li>I learned this cool thing:</li>
</ol>
</li>
<li><p>What you are working on will be automatically taken out of pivotal</p></li>
<li>At Noon every day an digest email will be sent out to the entire team (similar to the daily scrum)</li>
<li>A weekly summery digest email can also be configured</li>
<li>All of this content will be posted in  a Jekyl blog hosted internally at ZEFR.  This site will have the following features (most coming for free from <a href="http://jekyllrb.com/">Jekyl</a> or <a href="http://octopress.org">Octopress</a>):

<ol>
<li>Search</li>
<li>Be able to see history by team, person, company</li>
<li>Have <a href="http://disqus.com/">disqus</a> integrated</li>
</ol>
</li>
</ol>


<p>Anyways &mdash; just an idea.  Not going to do anything about it besides write this post.  But if someone develops it &mdash; Let me know!!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Deamonize Processes on Ubuntu]]></title>
    <link href="http://jtushman.github.io/blog/2013/05/14/deamonize-processes-on-ubuntu/"/>
    <updated>2013-05-14T13:07:00-04:00</updated>
    <id>http://jtushman.github.io/blog/2013/05/14/deamonize-processes-on-ubuntu</id>
    <content type="html"><![CDATA[<p><strong>Problem Statement:  What is the simplest was to deamonize a serivce (Celeryd)on Ubuntu.</strong></p>

<p>I am relatively new to Unix sys admin tasks (I have been relying on <a href="https://www.heroku.com/">heroku</a> to handle all of that for me)  But I ran into a problem where I could not rely on that paradigm.  I thought it was going to be really easy to do.  But it ended up taking me a lot longer then I expected.  Hopefuly this post will help someone in a similar situation.</p>

<p>There are a handful of unix initialization options:</p>

<ul>
<li><a href="http://supervisord.org/">Supervisor</a></li>
<li><a href="http://upstart.ubuntu.com/">Upstart</a> (/etc/init)</li>
<li>and <a href="http://en.wikipedia.org/wiki/Init">System V Init</a> (/etc/init.d)</li>
</ul>


<p>I tried all three, and really the only one where I am not throwing up in my mouth is Upstart.  This should be your default choice if you are running Ubuntu</p>

<p>Let me jump to the final solution, then I can go into the finer points</p>

<h4>1) Create an init script</h4>

<pre><code># This goes into /etc/init/celeryd
# celeryd -runs the celery worker as my virutal env user
#
#
# This task is run on startup to start the celery worker

description "runs the celery worker"
author "jonathan tushman"

start on runlevel [2345]
stop on runlevel [!2345]

# retry if ended unexpectedly
respawn

# limit the retries to max 15 times with timeouts of 5 seconds
respawn limit 15 5

# Time to wait between sending TERM and KILL signals
kill timeout 20

chdir /home/ubuntu/apps/money
exec su -c  'FLASK_ENV=production /usr/local/bin/celeryd --loglevel=info --concurrency=1 --logfile=/var/log/worker.log'
</code></pre>

<h4>F*ck thats it. (I hate how simple this solution is once you figured out how to do it)</h4>

<p>Now you are able to execute the following commands:</p>

<pre><code>&gt; sudo start celeryd
&gt; sudo restart celeryd
&gt; sudo stop celeryd
&gt; sudo status celeryd
</code></pre>

<p>You can also use the initctl script</p>

<pre><code>&gt; sudo initctl list 
</code></pre>

<p><strong>and</strong> whenever your machine startsup or shutsdown the service will automatically start up and stop respectively.  Thats what the following lines are for:</p>

<pre><code>start on runlevel [2345]
stop on runlevel [!2345]
</code></pre>

<p>To see whats going on, these tail commands are useful:</p>

<pre><code>&gt;   tail -f /var/log/money-worker.log -f /var/log/celery/celery.log

&gt;   tail -f /var/log/syslog
</code></pre>

<h4>The main thing that haunted me, was once again Unix permissions</h4>

<p>(One day, I am sure I am going to say &mdash; man! Unix permissions are awesome)</p>

<p>The most important line in the init script is the exec line:</p>

<pre><code>exec su -c  'FLASK_ENV=production /usr/local/bin/celeryd --loglevel=info --concurrency=1 --logfile=/var/log/worker.log'
</code></pre>

<p>So what I learned here is that sudo has its own environment variable space.  So even if I set the FLASK_ENV environement varable above in the script, it wouln&rsquo;t be applied.  So you need to use <code>su -c</code> which will execute the given string as super user.  Check out this StackOverflow <a href="http://stackoverflow.com/a/16533951/192791">post</a> for more info.</p>
]]></content>
  </entry>
  
</feed>
